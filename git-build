#!/bin/bash -e

showhelp () {
    echo "Usage: git build [--tag=<tag>] <branch> [<branch> ...]"
}

cleanup () {
    if test "$clean"; then
        echo build successful
    else
        echo restoring $restore
        git checkout -q $restore >/dev/null || true
        echo build failed >&2
    fi
}

declare tag=qa
declare base=
declare restore branch msg
declare clean=
declare -a branches

while test $# -gt 0; do
    case "$1" in
        --help)     showhelp;       exit;;
        -T|--tag)   tag=$2;         shift 2;;
        --tag=*)    tag=${1#*=};    shift;;
        -T?*)       tag=${1:2};     shift;;
        --)                         shift; break;;
        *)                          break;;
    esac
done

if ! test "$tag"; then
    echo "Tag cannot be empty" >&2
    exit 3
elif ! git rev-parse HEAD &>/dev/null; then
    echo "Cannot find HEAD" >&2
    exit 10
elif test $(git status --porcelain 2>/dev/null | wc -l) -gt 0; then
    echo "Working tree is not clean" >&2
    exit 11
elif test $# -eq 0; then
    echo "Must specify at least one branch" >&2
    exit 4
fi

base="$1"; shift
restore=$(git rev-parse --abbrev-ref HEAD)

trap cleanup EXIT

echo fetching latest from origin
git fetch >/dev/null

echo detaching from origin/$base
git checkout --detach "origin/$base" 2>/dev/null || {
    echo could not detach \(is $base a valid branch\?\) >&2
    exit 12
}

IFS=$'\n' branches=($(sort <<< "$*"))
unset IFS

for branch in ${branches[@]}; do
    echo merging $branch
    if ! git merge --no-ff -m"merging $branch" "origin/$branch" >/dev/null; then
        echo merge failed
        git merge --abort
        git merge --no-ff -m"merging $branch" "origin/$branch" || true
        git merge --abort
        exit 13
    fi
done

echo creating $tag tag
msg="tagging $tag build from: $base ${branches[@]}"
git tag -fa -m"$msg" $tag >/dev/null

echo pushing $tag tag to origin
git push -qf origin $tag >/dev/null

echo restoring $restore branch
git checkout -q $restore >/dev/null

echo pushed $tag build tag

clean=1
